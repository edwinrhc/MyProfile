---
import BaseLayout from "../../layouts/BaseLayout.astro";


export const frontmatter = {
    title: "üîê C√≥mo implementar JWT en Spring Boot paso a paso",
    description: "Aprende a proteger tu API REST con autenticaci√≥n basada en tokens JWT usando Spring Boot 3.x.",
    // date: "2025-04-21",
    tags: ["Spring Boot", "JWT"],
    path: "/blog/como-implementar-jwt-spring-boot"
};

const jwtUtilCode = `
public class JwtUtil {

    private static final String SECRET = "mi-clave-secreta";

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 horas
                .signWith(Keys.hmacShaKeyFor(SECRET.getBytes()), SignatureAlgorithm.HS256)
                .compact();
    }

    public String extractUsername(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(Keys.hmacShaKeyFor(SECRET.getBytes()))
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        return extractUsername(token).equals(userDetails.getUsername());
    }
}
`.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
---

<BaseLayout title="| JWT Auth Spring Boot">
    <section class="py-24  text-gray-800 px-6 ">
        <div class="max-w-4xl mx-auto space-y-16">

            <header class="text-center">
                <h1 class="text-4xl font-bold text-blue-800">üîê C√≥mo implementar JWT en Spring Boot paso a paso</h1>
                <p class="text-gray-600 mt-4 text-lg max-w-2xl mx-auto">
                    Aprende a proteger tu API REST con autenticaci√≥n basada en tokens JWT usando Spring Boot 3.x.
                </p>
            </header>

            <!-- Introducci√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üìç ¬øQu√© es JWT?</h2>
                <p>
                    JWT (JSON Web Token) es un est√°ndar abierto (RFC 7519) que permite transmitir informaci√≥n de forma segura entre partes como un objeto JSON firmado.
                </p>
                <p>
                    En este art√≠culo aprender√°s a implementarlo en una API REST creada con Spring Boot 3.x.
                </p>
            </section>

            <!-- Dependencias -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üì¶ 1. Agregar dependencias</h2>
                <p>En tu archivo <code>pom.xml</code> agrega:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;
    &lt;version&gt;0.11.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;
    &lt;version&gt;0.11.5&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;
    &lt;version&gt;0.11.5&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
            </section>

            <!-- Utilidad JWT -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üîß 2. Crear la clase utilitaria `JwtUtil`</h2>
                <p>Esta clase se encargar√° de generar y validar el token:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto">
          <code set:html={jwtUtilCode} />
        </pre>
            </section>

            <!-- Seguridad -->
            <!-- Seguridad -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üõ°Ô∏è 3. Configurar seguridad con Spring Security y filtros JWT</h2>
                <p>
                    Para proteger tu API con JWT, debes configurar Spring Security para:
                </p>

                <ul class="list-disc list-inside ml-4 my-4 text-gray-700 space-y-2">
                    <li><strong>‚ùó SecurityFilterChain:</strong> Define qu√© rutas est√°n protegidas y cu√°les son p√∫blicas (ej. <code>/login</code> o <code>/register</code>).</li>
                    <li><strong>üßπ JwtFilter:</strong> Un filtro personalizado que intercepta cada petici√≥n, valida el token JWT y carga el usuario en el contexto de seguridad.</li>
                    <li><strong>üß† AuthenticationManager:</strong> Es el componente responsable de autenticar al usuario cuando env√≠a sus credenciales por primera vez.</li>
                </ul>

                <p class="mb-2">
                    Estas configuraciones permiten interceptar y validar el JWT en cada solicitud protegida sin necesidad de mantener una sesi√≥n en el servidor.
                </p>

                <p class="mb-2">
                    Un flujo t√≠pico es:
                </p>

                <ol class="list-decimal list-inside ml-4 text-gray-700 space-y-1">
                    <li>El usuario env√≠a sus credenciales a <code>/login</code>.</li>
                    <li>El backend valida y responde con un JWT.</li>
                    <li>El cliente guarda el token y lo env√≠a en cada request como <code>Authorization: Bearer &lt;token&gt;</code>.</li>
                    <li>El filtro JWT lo valida, y si es correcto, deja pasar la petici√≥n.</li>
                </ol>

                <p class="text-sm text-gray-500 mt-4">
                    Puedes ver la implementaci√≥n completa de estas clases en mi repositorio de GitHub:
                    <a href="https://github.com/edwinrhc/clinic-appointment-system" target="_blank" class="text-blue-600 hover:underline">üîó clinic-appointment-system</a>
                </p>
            </section>


            <!-- Pruebas -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üß™ 4. Probar con Postman</h2>
                <ul class="list-disc list-inside ml-4">
                    <li>Realiza un POST a <code>/login</code> con usuario y contrase√±a</li>
                    <li>Recibe el JWT en la respuesta</li>
                    <li>Agrega el JWT como <code>Bearer Token</code> en las peticiones protegidas</li>
                </ul>
            </section>

            <!-- Conclusi√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-green-700">‚úÖ Conclusi√≥n</h2>
                <p>
                    JWT es una forma poderosa y moderna de proteger tus APIs. Usar Spring Boot con `jjwt` te permite hacerlo de forma simple y escalable.
                </p>
            </section>

        </div>
    </section>
</BaseLayout>

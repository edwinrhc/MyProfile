---
export const frontmatter = {
    title: "üöÄ C√≥mo usar GitHub como un profesional",
    description: "Gu√≠a pr√°ctica para dominar GitHub: desde tus primeros commits hasta colaborar en proyectos reales con buenas pr√°cticas.",
    date: "2025-04-21",
    tags: ["GitHub", "Git", "Portafolio", "Buenas pr√°cticas"],
    path: "/blog/como-usar-github-como-un-profesional"
};
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout title="| GitHub Pro">
    <section class="py-24  text-gray-800 px-6">
        <div class="max-w-4xl mx-auto space-y-16">

            <!-- Header -->
            <header class="text-center">
                <h1 class="text-4xl font-bold text-blue-800">üöÄ C√≥mo usar GitHub como un profesional</h1>
                <p class="text-gray-600 mt-4 text-lg max-w-2xl mx-auto">
                    Gu√≠a pr√°ctica para dominar GitHub: desde tus primeros commits hasta colaborar en proyectos reales
                    con buenas pr√°cticas.
                </p>
            </header>

            <!-- Introducci√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üîç ¬øPor qu√© aprender GitHub como un
                    profesional?</h2>
                <p>
                    GitHub es m√°s que un repositorio de c√≥digo. Es tu portafolio vivo, tu herramienta de colaboraci√≥n y
                    tu espacio de trabajo digital. Usarlo bien demuestra que sabes trabajar en equipo, organizar tus
                    ideas y construir software con calidad.
                </p>
                <p>
                    En este art√≠culo te ense√±o c√≥mo usar GitHub con enfoque profesional, aplicado a tus propios
                    proyectos.
                </p>
            </section>

            <!-- Estructura -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">‚úÖ Buenas pr√°cticas b√°sicas</h2>
                <ul class="list-disc list-inside ml-4 space-y-2">
                    <li><strong>Inicializa tus repositorios desde cero:</strong> <code>git init</code>, <code>git remote
                        add origin</code>, etc.
                    </li>
                    <li><strong>Usa una estructura clara:</strong> <code>src/</code>, <code>docs/</code>, <code>.gitignore</code>,
                        <code>README.md</code></li>
                    <li><strong>Haz commits descriptivos:</strong> Sigue el est√°ndar <code>tipo(√°mbito):
                        descripci√≥n</code> (feat, fix, docs...)
                    </li>
                    <li><strong>Crea un README profesional:</strong> con descripci√≥n, tecnolog√≠as, instalaci√≥n, autor,
                        etc.
                    </li>
                </ul>
            </section>

            <!-- README -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üìù C√≥mo escribir un README profesional</h2>
                <p>El README es la carta de presentaci√≥n de tu proyecto. Aqu√≠ un ejemplo b√°sico:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code># Nombre del Proyecto

Descripci√≥n breve del proyecto.

## Tecnolog√≠as usadas
- Java
- Spring Boot
- Astro
- Tailwind CSS

## Instalaci√≥n
1. Clona el repositorio
2. Ejecuta `npm install` o `mvn install`
3. Corre el servidor local

## Autor
Edwin Huamanttupa - [@edwinrhc](https://github.com/edwinrhc)
</code></pre>
            </section>

            <!-- Commits -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üéØ Commits profesionales con Conventional
                    Commits</h2>
                <p>
                    Utiliza etiquetas como <code>feat</code>, <code>fix</code>, <code>docs</code>, etc., para
                    estructurar tus commits. Ejemplos:
                </p>
                <ul class="list-disc list-inside ml-4 space-y-1">
                    <li><code>feat(blog): agrega art√≠culo sobre autenticaci√≥n JWT</code></li>
                    <li><code>docs(readme): actualiza gu√≠a de instalaci√≥n</code></li>
                    <li><code>chore(git): a√±ade plantilla de commits convencional</code></li>
                </ul>
            </section>

            <!-- Gitmessage -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">‚úçÔ∏è Uso de plantilla .gitmessage.txt para commits
                    profesionales</h2>
                <p>
                    Para escribir mensajes de commit consistentes, puedes crear una plantilla que te recuerde c√≥mo usar
                    el formato <strong>Conventional Commits</strong>. Esto te ayuda a mantener tu historial limpio y
                    entendible, sobre todo si trabajas en equipo o tienes varios proyectos.
                </p>

                <p class="mt-2">Crea un archivo llamado <code>.gitmessage.txt</code> en la ra√≠z de tu proyecto con el
                    siguiente contenido:</p>

                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code># tipo(√°mbito): descripci√≥n breve
#
# Tipos comunes:
# feat:     nueva funcionalidad
# fix:      correcci√≥n de errores
# docs:     cambios en la documentaci√≥n
# style:    cambios visuales sin l√≥gica
# refactor: reestructuraci√≥n sin cambiar comportamiento
# chore:    mantenimiento (dependencias, configuraci√≥n)
# test:     a√±adir o modificar pruebas

# Ejemplo:
# feat(blog): agrega nuevo art√≠culo sobre uso de GitHub
# fix(login): corrige validaci√≥n de token JWT
</code></pre>

                <p class="mt-4">Luego, config√∫ralo globalmente con los siguientes comandos:</p>

                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>git config --global commit.template ".gitmessage.txt"
git config --global core.editor "code --wait"</code></pre>

                <p class="mt-4">
                    La pr√≥xima vez que hagas <code>git commit</code> sin <code>-m</code>, VS Code se abrir√°
                    autom√°ticamente con esta plantilla precargada para que escribas un mensaje claro y profesional.
                </p>

                <p class="text-sm text-gray-500 mt-2">
                    üí° Consejo: tambi√©n puedes versionar tu <code>.gitmessage.txt</code> en tu repositorio y agregar
                    instrucciones en el README para que otros lo usen.
                </p>
            </section>


            <!-- Colaboraci√≥n -->
            <!-- Ramas y Pull Requests -->
            <!-- Revisi√≥n de c√≥digo y protecci√≥n de ramas -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üîç Pull Requests, revisiones de c√≥digo y reglas de protecci√≥n de ramas</h2>
                <p>
                    Cuando trabajas con ramas y haces un <strong>Pull Request (PR)</strong>, est√°s proponiendo cambios que quieres fusionar al c√≥digo principal. Aqu√≠ es donde entra el proceso de revisi√≥n, muy com√∫n en entornos profesionales.
                </p>

                <h3 class="text-lg font-semibold text-blue-600 mt-6 mb-2">üß† Revisi√≥n de c√≥digo (Code Review)</h3>
                <p>
                    Un PR te permite revisar los cambios l√≠nea por l√≠nea, dejar comentarios, sugerencias o marcar cosas para corregir. Puedes:
                </p>

                <ul class="list-disc list-inside ml-4 space-y-1">
                    <li>Solicitar revisi√≥n a compa√±eros</li>
                    <li>Comentar l√≠neas de c√≥digo espec√≠ficas</li>
                    <li>Solicitar cambios antes de aprobar</li>
                    <li>Aprobar el PR si todo est√° correcto</li>
                </ul>

                <p class="mt-4">
                    Incluso trabajando solo, un PR te obliga a ver tu propio c√≥digo con m√°s atenci√≥n antes de hacer merge a <code>main</code>.
                </p>

                <h3 class="text-lg font-semibold text-blue-600 mt-6 mb-2">üõ°Ô∏è Protecci√≥n de ramas (Branch Protection Rules)</h3>
                <p>
                    En GitHub puedes aplicar reglas a ramas importantes como <code>main</code> para evitar errores o merges accidentales.
                </p>

                <p class="mt-2">
                    Algunas reglas comunes que puedes configurar:
                </p>

                <ul class="list-disc list-inside ml-4 space-y-1">
                    <li>‚úÖ Requerir al menos 1 aprobaci√≥n de revisi√≥n antes de hacer merge</li>
                    <li>üîí No permitir pushes directos a <code>main</code> (solo a trav√©s de PRs)</li>
                    <li>üì¶ Requerir que el c√≥digo pase tests antes de merge (si usas CI)</li>
                    <li>üìÅ Exigir commits firmados (para seguridad en proyectos abiertos)</li>
                </ul>

                <p class="mt-4">
                    Para activar estas reglas, ve al repositorio en GitHub ‚Üí <strong>Settings</strong> ‚Üí <strong>Branches</strong> ‚Üí <strong>Add rule</strong> y selecciona la rama que deseas proteger.
                </p>

                <p class="text-sm text-gray-500 mt-4">
                    üí° Consejo: en proyectos reales, estas reglas evitan errores en producci√≥n y mantienen un control de calidad autom√°tico.
                </p>
            </section>



            <!-- Extras -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üß∞ Extras para subir de nivel</h2>
                <ul class="list-disc list-inside ml-4 space-y-2">
                    <li><strong>GitHub Pages:</strong> publica p√°ginas est√°ticas directamente desde tu repo.</li>
                    <li><strong>Actions:</strong> automatiza pruebas, despliegues y tareas repetitivas.</li>
                    <li><strong>Insights:</strong> analiza actividad del proyecto.</li>
                </ul>
            </section>

            <!-- Conclusi√≥n -->
            <!-- Conclusi√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-green-700">‚úÖ Conclusi√≥n: tu perfil en GitHub es tu mejor carta</h2>
                <p>
                    GitHub es mucho m√°s que una herramienta para subir c√≥digo. Es una plataforma donde puedes mostrar tu evoluci√≥n como desarrollador, colaborar con otros, aprender mejores pr√°cticas y mantener un historial profesional de tu trabajo.
                </p>

                <p class="mt-4">
                    Al dominar herramientas como commits estructurados, ramas, PRs, revisiones y buenas pr√°cticas en la organizaci√≥n del proyecto, est√°s dando pasos s√≥lidos hacia el desarrollo profesional.
                </p>

                <p class="mt-4">
                    Te animo a aplicar estas recomendaciones en tus propios proyectos, escribir tu documentaci√≥n con cari√±o, y cuidar cada detalle como si ya formaras parte de un equipo real. Porque eso es lo que haces con cada l√≠nea de c√≥digo: mostrar de lo que eres capaz.
                </p>
<!--
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-8 text-center">
                    <h3 class="text-xl font-semibold text-blue-700 mb-2">üë®‚Äçüíª Mi perfil profesional en GitHub</h3>
                    <p class="text-gray-700 mb-4">Aqu√≠ puedes encontrar mis proyectos, buenas pr√°cticas y art√≠culos t√©cnicos como este:</p>
                    <a href="https://github.com/edwinrhc" target="_blank" class="inline-block bg-blue-600 text-white font-medium px-5 py-2 rounded-lg hover:bg-blue-700 transition">
                        üîó github.com/edwinrhc
                    </a>
                </div>

                <p class="text-sm text-gray-500 mt-6 text-center">
                    ¬øTe gust√≥ este art√≠culo? ¬°Explora m√°s publicaciones en mi <a href="/blog" class="text-blue-600 underline">blog t√©cnico</a>!
                </p>-->
            </section>


        </div>
    </section>
</BaseLayout>

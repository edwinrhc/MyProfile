---
import BaseLayout from "../../layouts/BaseLayout.astro";

export const frontmatter = {
    title: "üê≥ C√≥mo dockeric√© mi aplicaci√≥n Spring Boot",
    description: "Aprende c√≥mo contenedizar tu backend paso a paso usando Docker y Docker Compose.",
    // date: "2025-04-21",
    tags: ["Spring Boot", "Docker"],
    path: "/blog/dockerizar-mi-springboot"
};
---

<BaseLayout title="| Dockerizar ">
    <section class="py-24 text-gray-800 px-6">
        <div class="max-w-4xl mx-auto space-y-16">

            <header class="text-center">
                <h1 class="text-4xl font-bold text-blue-800">‚ú® C√≥mo dockeric√© mi aplicaci√≥n Spring Boot paso a paso</h1>
                <p class="text-gray-600 mt-4 text-lg max-w-2xl mx-auto">
                    Gu√≠a pr√°ctica para contenedizar un backend con Spring Boot usando Docker y Docker Compose.
                </p>
            </header>

            <!-- Introducci√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üìç Introducci√≥n</h2>
                <p class="mb-2">
                    Cuando desarrollas una aplicaci√≥n backend con Spring Boot, llega un punto en el que quieres hacerla
                    f√°cil de desplegar y ejecutar en cualquier entorno.
                </p>
                <p>
                    En este art√≠culo te explico c√≥mo dockeric√© mi backend desarrollado con <strong>Java 17 y Spring Boot
                    3.3.x</strong>, usando <strong>Docker y Docker Compose</strong>.
                </p>
            </section>

            <!-- Preparar proyecto -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üõ†Ô∏è 1. Preparar el proyecto Spring Boot</h2>
                <p>Mi API REST usa:</p>
                <ul class="list-disc list-inside ml-4 mb-4">
                    <li>Spring Boot 3.3.x</li>
                    <li>MySQL</li>
                    <li>JWT para autenticaci√≥n</li>
                    <li>Stripe para pagos</li>
                </ul>
                <p class="mb-2">Estructura b√°sica del proyecto:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>/src
/pom.xml
/application.properties</code></pre>
            </section>

            <!-- Dockerfile -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üê≥ 2. Crear el Dockerfile</h2>
                <p>Crea el archivo <code>Dockerfile</code> en la ra√≠z del proyecto con este contenido:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>FROM eclipse-temurin:17-jdk-alpine
WORKDIR /app
COPY target/clinic-appointment-system-0.0.1-SNAPSHOT.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]</code></pre>
                <p class="text-sm text-gray-500 mt-2">üìå Verifica que el <code>.jar</code> coincida con tu build.</p>
            </section>

            <!-- Variables de entorno -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">‚öôÔ∏è 3. Configurar variables en <code>application.properties</code>
                </h2>
                <p>Usa variables de entorno para ocultar tus credenciales:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>spring.datasource.url=${"{SPRING_DATASOURCE_URL}"}
                    spring.datasource.username=${"{SPRING_DATASOURCE_USERNAME}"}
                    spring.datasource.password=${"{SPRING_DATASOURCE_PASSWORD}"}
                    stripe.api.key=${"{STRIPE_API_KEY}"}</code></pre>
            </section>

            <!-- Probar localmente -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üìä 4. Probar la imagen Docker localmente</h2>
                <p>Compila tu proyecto:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>./mvnw clean package</code></pre>
                <p>Luego crea la imagen:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>docker build -t clinic-backend .</code></pre>
                <p>Y ejec√∫tala:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>docker run -e SPRING_DATASOURCE_URL=... -p 8080:8080 clinic-backend</code></pre>
            </section>

            <!-- Docker Compose -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">ü§ù 5. Agregar Docker Compose para backend +
                    MySQL</h2>
                <p>Contenido del archivo <code>docker-compose.yml</code>:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>version: '3.8'

                    services:
                      mysql:
                        image: mysql:8
                        container_name: mysql-db
                        environment:
                          MYSQL_ROOT_PASSWORD: root
                          MYSQL_DATABASE: clinic
                        ports:
                          - "3306:3306"
                        volumes:
                          - mysql-data:/var/lib/mysql

                      backend:
                        build: .
                        container_name: clinic-backend
                        environment:
                          SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/clinic
                          SPRING_DATASOURCE_USERNAME: root
                          SPRING_DATASOURCE_PASSWORD: root
                          STRIPE_API_KEY: tu-clave-secreta
                        depends_on:
                          - mysql
                        ports:
                          - "8080:8080"

                    volumes:
                      mysql-data:
                </code></pre>
            </section>

            <!-- Levantar entorno -->
            <section>
                <h2 class="text-2xl font-semibold text-blue-700 mb-4">üöÄ 6. Levantar todo el entorno</h2>
                <p>Desde la ra√≠z del proyecto:</p>
                <pre class="bg-gray-900 text-green-300 text-sm rounded-lg p-4 overflow-x-auto"><code>docker-compose up --build</code></pre>
                <p>üöó Tu backend y base de datos ya estar√°n corriendo en contenedores.</p>
            </section>

            <!-- Conclusi√≥n -->
            <section>
                <h2 class="text-2xl font-semibold text-green-700">‚úÖ Conclusi√≥n</h2>
                <ul class="list-disc list-inside text-gray-700 ml-4 space-y-1">
                    <li>Ejecuta tu app sin configurar Java ni MySQL manualmente.</li>
                    <li>A√≠sla dependencias y facilita pruebas.</li>
                    <li>Prep√°rate para un despliegue en la nube.</li>
                </ul>
            </section>

        </div>
    </section>
</BaseLayout>
